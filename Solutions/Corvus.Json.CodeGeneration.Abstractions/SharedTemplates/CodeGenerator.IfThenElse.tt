<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasIfThenElse is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.IfThenElse should not be emitted if HasIfThenElse is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
<#  if (HasThen && !HasElse)
    { #>

    /// <summary>
    /// Gets a value indicating whether this matches an If/Then case, return the value as the type defined for the then case.
    /// </summary>
    /// <param name="result">This value cast to the 'then' type, when the 'if' schema matches, otherwise an Undefined instance of the 'then' type.</param>
    /// <returns><c>True</c> if the 'if' case matched, and the 'else' instance was provided.</returns>
    public bool MatchIf<#= IfDotnetTypeName #>(out <#= ThenFullyQualifiedDotnetTypeName #> result)
    {
        if (this.As<<#= IfFullyQualifiedDotnetTypeName#>>().IsValid())
        {
            result = this.As<<#=ThenFullyQualifiedDotnetTypeName#>>();
            return true;
        }

        result = <#=ThenFullyQualifiedDotnetTypeName#>.Undefined;
        return false;
    }
<#  }
    if (HasThen && HasElse)
    { #>

    /// <summary>
    /// Gets a value indicating whether this matches an If/Then/Else case, returning the value as the type defined for the then or else case.
    /// </summary>
    /// <param name="then">This value cast to the 'then' type, when the 'if' schema matches, otherwise an Undefined instance of the 'then' type.</param>
    /// <param name="else">This value cast to the 'else' type, when the 'if' schema does not match, otherwise an Undefined instance of the 'else' type.</param>
    /// <returns><c>True</c> if the 'if' case matched, and the 'then' instance was provided, otherwise <c>False</c>.</returns>
    public bool MatchIf<#= IfDotnetTypeName #>(out <#= ThenFullyQualifiedDotnetTypeName #> @then, out <#= ElseFullyQualifiedDotnetTypeName #> @else)
    {
        if (this.As<<#= IfFullyQualifiedDotnetTypeName#>>().IsValid())
        {
            @then = this.As<<#=ThenFullyQualifiedDotnetTypeName#>>();
            @else = <#=ElseFullyQualifiedDotnetTypeName#>.Undefined;
            return true;
        }

        @then = <#=ThenFullyQualifiedDotnetTypeName#>.Undefined;
        @else = this.As<<#=ElseFullyQualifiedDotnetTypeName#>>();
        return false;
    }
<#  } #>
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasIfThenElse;
        }
    }
#>